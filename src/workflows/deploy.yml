name: Deploy EyeMotion to Google Cloud

on:
  push:
    branches: [ main, staging ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: eyemotion-production
  REGION: asia-southeast1
  SERVICE_NAME: eyemotion-web

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run type check
      run: npm run type-check
    
    - name: Run linting
      run: npm run lint
    
    - name: Run tests
      run: npm run test:ci

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build:production
      env:
        NODE_ENV: production
        REACT_APP_ENV: production
        REACT_APP_BASE_URL: https://eyemotion.ai
        REACT_APP_API_URL: https://api.eyemotion.ai
    
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true
    
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
    
    - name: Determine service name
      id: service-name
      run: |
        if [ "${{ github.ref }}" = "refs/heads/staging" ]; then
          echo "service=eyemotion-staging" >> $GITHUB_OUTPUT
        else
          echo "service=eyemotion-web" >> $GITHUB_OUTPUT
        fi
    
    - name: Build and push Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/${{ steps.service-name.outputs.service }}:$GITHUB_SHA .
        docker push gcr.io/$PROJECT_ID/${{ steps.service-name.outputs.service }}:$GITHUB_SHA
    
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ steps.service-name.outputs.service }} \
          --image gcr.io/$PROJECT_ID/${{ steps.service-name.outputs.service }}:$GITHUB_SHA \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --port 3000 \
          --memory 2Gi \
          --cpu 2 \
          --max-instances 100 \
          --set-env-vars NODE_ENV=production,REACT_APP_ENV=production
    
    - name: Update domain mapping (production only)
      if: github.ref == 'refs/heads/main'
      run: |
        gcloud run domain-mappings create \
          --service $SERVICE_NAME \
          --domain eyemotion.ai \
          --region $REGION || true
    
    - name: Get service URL
      id: url
      run: |
        url=$(gcloud run services describe ${{ steps.service-name.outputs.service }} --region $REGION --format="value(status.url)")
        echo "url=$url" >> $GITHUB_OUTPUT
    
    - name: Health check
      run: |
        sleep 30
        curl -f ${{ steps.url.outputs.url }}/health || exit 1
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "ðŸš€ Deployment successful!"
        echo "Service URL: ${{ steps.url.outputs.url }}"
        echo "Commit: $GITHUB_SHA"
        echo "Branch: ${{ github.ref_name }}"

  performance-test:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Performance test
      run: |
        # Basic performance test
        curl -w "@curl-format.txt" -o /dev/null -s "https://eyemotion.ai"
        
    - name: Lighthouse CI
      uses: treosh/lighthouse-ci-action@v9
      with:
        urls: |
          https://eyemotion.ai
        uploadArtifacts: true
        temporaryPublicStorage: true